/*
 * This file is part of the COMROGUE Operating System for Raspberry Pi
 *
 * Copyright (c) 2013, Eric J. Bowersox / Erbosoft Enterprises
 * All rights reserved.
 *
 * This program is free for commercial and non-commercial use as long as the following conditions are
 * adhered to.
 *
 * Copyright in this file remains Eric J. Bowersox and/or Erbosoft, and as such any copyright notices
 * in the code are not to be removed.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this list of conditions and
 *   the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *   the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * "Raspberry Pi" is a trademark of the Raspberry Pi Foundation.
 */
import "comrogue/object_types.idl";
import "comrogue/objectbase.idl";

/*----------------------------
 * IEnumConnections interface
 *----------------------------
 */

[object, uuid(B196B287-BAB4-101A-B69C-00AA00341D07), pointer_default(unique)]
interface IEnumConnections: IUnknown
{
  typedef IEnumConnections *PENUMCONNECTIONS;

  typedef struct tagCONNECTDATA {
    IUnknown *pUnk;
    UINT32 uiCookie;
  } CONNECTDATA;

  typedef CONNECTDATA *PCONNECTDATA;

  HRESULT Next([in] UINT32 cConnections, [out, size_is(cConnections), length_is(*pcFetched)] PCONNECTDATA rgcd,
	       [out] UINT32 *pcFetched);
  HRESULT Skip([in] UINT32 cConnections);
  HRESULT Reset(void);
  HRESULT Clone([out] IEnumConnections **ppEnum);
}

/*----------------------------
 * IConnectionPoint interface
 *----------------------------
 */

[object, uuid(B196B286-BAB4-101A-B69C-00AA00341D07), pointer_default(unique)]
interface IConnectionPoint: IUnknown
{
  typedef IConnectionPoint *PCONNECTIONPOINT;

  HRESULT GetConnectionInterface([out] IID *pIID);
  HRESULT GetConnectionPointContainer([out] IConnectionPointContainer **ppCPC);
  HRESULT Advise([in] IUnknown *punkSink, [out] UINT32 *puiCookie);
  HRESULT Unadvise([in] UINT32 uiCookie);
  HRESULT EnumConnections([out] IEnumConnections **ppEnum);
}

/*---------------------------------
 * IEnumConnectionPoints interface
 *---------------------------------
 */

[object, uuid(B196B285-BAB4-101A-B69C-00AA00341D07), pointer_default(unique)]
interface IEnumConnectionPoints: IUnknown
{
  typedef IEnumConnectionPoints *PENUMCONNECTIONPOINTS;

  HRESULT Next([in] UINT32 cConnections, [out, size_is(cConnections), length_is(*pcFetched)] PCONNECTIONPOINT *ppCP,
	       [out] UINT32 *pcFetched);
  HRESULT Skip([in] UINT32 cConnections);
  HRESULT Reset(void);
  HRESULT Clone([out] IEnumConnectionPoints **ppEnum);
}

/*-------------------------------------
 * IConnectionPointContainer interface
 *-------------------------------------
 */

[object, uuid(B196B284-BAB4-101A-B69C-00AA00341D07), pointer_default(unique)]
interface IConnectionPointContainer: IUnknown
{
  typedef IConnectionPointContainer *PCONNECTIONPOINTCONTAINER;

  HRESULT EnumConnectionPoints([out] IEnumConnectionPoints **ppEnum);
  HRESULT FindConnectionPoint([in] REFIID riid, [out] IConnectionPoint **ppCP);
}
