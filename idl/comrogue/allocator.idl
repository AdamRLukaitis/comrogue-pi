/*
 * This file is part of the COMROGUE Operating System for Raspberry Pi
 *
 * Copyright (c) 2013, Eric J. Bowersox / Erbosoft Enterprises
 * All rights reserved.
 *
 * This program is free for commercial and non-commercial use as long as the following conditions are
 * adhered to.
 *
 * Copyright in this file remains Eric J. Bowersox and/or Erbosoft, and as such any copyright notices
 * in the code are not to be removed.
 *
 * Redistribution and use in source and binary forms, with or without modification, are permitted
 * provided that the following conditions are met:
 * 
 * * Redistributions of source code must retain the above copyright notice, this list of conditions and
 *   the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and
 *   the following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * "Raspberry Pi" is a trademark of the Raspberry Pi Foundation.
 */
import "comrogue/objectbase.idl";

/*-------------------
 * IMalloc interface
 *-------------------
 */

[object, uuid(00000002-0000-0000-C000-000000000046)]
interface IMalloc : IUnknown
{
  [unique] typedef IMalloc *PMALLOC;
  PVOID Alloc([in] SIZE_T cb);
  PVOID Realloc([in] PVOID pv, [in] SIZE_T cb);
  void Free([in] PVOID pv);
  SIZE_T GetSize([in] PVOID pv);
  INT32 DidAlloc([in] PVOID pv);
  void HeapMinimize(void);
}

/*----------------------
 * IMallocSpy interface
 *----------------------
 */

[object, uuid(0000001d-0000-0000-C000-000000000046)]
interface IMallocSpy: IUnknown
{
  [unique] typedef IMallocSpy *PMALLOCSPY;

  SIZE_T PreAlloc([in] SIZE_T cbRequest);
  PVOID PostAlloc([in] PVOID pActual);
  PVOID PreFree([in] PVOID pRequest, [in] BOOL fSpyed);
  void PostFree([in] BOOL fSpyed);
  SIZE_T PreRealloc([in] PVOID pRequest, [in] SIZE_T cbRequest, [out] PVOID *ppNewRequest, [in] BOOL fSpyed);
  PVOID PostRealloc([in] PVOID pActual, [in] BOOL fSpyed);
  PVOID PreGetSize([in] PVOID pRequest, [in] BOOL fSpyed);
  SIZE_T PostGetSize([in] SIZE_T cbActual, [in] BOOL fSpyed);
  PVOID PreDidAlloc([in] PVOID pRequest, [in] BOOL fSpyed);
  INT32 PostDidAlloc([in] PVOID pRequest, [in] BOOL fSpyed, [in] INT32 fActual);
  void PreHeapMinimize(void);
  void PostHeapMinimize(void);
}

/*---------------------------
 * IChunkAllocator interface
 *---------------------------
 */

[object, uuid(76f6c6cf-2f4e-4d42-b620-99aa6872d477)]
interface IChunkAllocator: IUnknown
{
  [unique] typedef IChunkAllocator *PCHUNKALLOCATOR;

  HRESULT AllocChunk([in] UINT32 cbChunk, [in] UINT32 uiAlignment, [out] PVOID *ppvChunk);
  HRESULT FreeChunk([in] PVOID pvChunk, [in] UINT32 cbChunk);
  HRESULT PurgeUnusedRegion([in] PVOID pvRegion, [in] UINT32 cbRegion);
}

/*------------------------------
 * IHeapConfiguration interface
 *------------------------------
 */

[object, uuid(c867272d-6a5d-4e43-9377-ddc65f82c0e1), pointer_default(unique)]
interface IHeapConfiguration: IUnknown
{
  [unique] typedef IHeapConfiguration *PHEAPCONFIGURATION;
  HRESULT GetActiveDirtyRatio([out] SSIZE_T *pcbRatio);
  HRESULT SetActiveDirtyRatio([in] SSIZE_T cbRatio);
}
